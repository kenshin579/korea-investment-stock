---
alwaysApply: false
---

# 테스트 작성 규칙

## 단위 테스트
- pytest 프레임워크 사용
- 테스트 파일명: `test_*.py`
- 테스트 함수명: `test_*`

## Mock 사용
```python
# API 호출은 반드시 Mock 처리
@patch('requests.post')
def test_api_call(mock_post):
    mock_post.return_value.json.return_value = {
        "rt_cd": "0",
        "output": {...}
    }
```

## 테스트 데이터
- 실제 API 키나 계좌번호를 사용하지 않음
- 테스트용 환경 변수 사용
```python
os.environ['KOREA_INVESTMENT_API_KEY'] = 'test_key'
os.environ['KOREA_INVESTMENT_API_SECRET'] = 'test_secret'
os.environ['KOREA_INVESTMENT_ACCOUNT_NO'] = '00000000-00'
```

## 테스트 커버리지
- 핵심 기능은 90% 이상 커버리지 유지
- Rate limiter, Error recovery 등 중요 모듈은 100% 목표 # 테스트 작성 규칙

## 단위 테스트
- pytest 프레임워크 사용
- 테스트 파일명: `test_*.py`
- 테스트 함수명: `test_*`

## Mock 사용
```python
# API 호출은 반드시 Mock 처리
@patch('requests.post')
def test_api_call(mock_post):
    mock_post.return_value.json.return_value = {
        "rt_cd": "0",
        "output": {...}
    }
```

## 테스트 데이터
- 실제 API 키나 계좌번호를 사용하지 않음
- 테스트용 환경 변수 사용
```python
os.environ['KOREA_INVESTMENT_API_KEY'] = 'test_key'
os.environ['KOREA_INVESTMENT_API_SECRET'] = 'test_secret'
os.environ['KOREA_INVESTMENT_ACCOUNT_NO'] = '00000000-00'
```

## 테스트 커버리지
- 핵심 기능은 90% 이상 커버리지 유지
- Rate limiter, Error recovery 등 중요 모듈은 100% 목표 